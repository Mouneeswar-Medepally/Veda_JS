### JavaScript Modules

In JavaScript, modules are reusable pieces of code that can be 
imported and exported across different files. 
They help in organizing code, avoiding global scope pollution, 
and making the codebase more maintainable.

JavaScript supports two primary module systems:

1. **CommonJS Modules**
2. **ES6 (ECMAScript 2015) Modules**

#### 1. CommonJS Modules

CommonJS is the module system used in Node.js. It allows you to export and import modules using `module.exports` and `require()`.

**Example of CommonJS Modules:**

- **Creating a Module (`math.js`):**
  ```javascript
  // math.js
  function add(a, b) {
      return a + b;
  }

  function subtract(a, b) {
      return a - b;
  }

  module.exports = {
      add,
      subtract
  };
  ```

- **Using the Module (`app.js`):**
  ```javascript
  // app.js
  const math = require('./math');

  console.log(math.add(5, 3)); // Outputs: 8
  console.log(math.subtract(5, 3)); // Outputs: 2
  ```

In CommonJS, `require()` is used to import modules, and `module.exports` or `exports` is used to export them.

#### 2. ES6 Modules

ES6 modules, also known as ECMAScript 2015 modules, are the standard module system in modern JavaScript (supported natively in the browser and Node.js). ES6 modules use `import` and `export` statements.

**Example of ES6 Modules:**

- **Creating a Module (`math.js`):**
  ```javascript
  // math.js
  export function add(a, b) {
      return a + b;
  }

  export function subtract(a, b) {
      return a - b;
  }
  ```

- **Using the Module (`app.js`):**
  ```javascript
  // app.js
  import { add, subtract } from './math.js';

  console.log(add(5, 3)); // Outputs: 8
  console.log(subtract(5, 3)); // Outputs: 2
  ```

In ES6, `export` is used to make functions, objects, or values available to other modules, and `import` is used to bring them into the current module.

##### Named Exports vs. Default Exports

- **Named Exports:**
  You can export multiple values from a module:
  ```javascript
  // math.js
  export const PI = 3.14159;
  export function multiply(a, b) {
      return a * b;
  }
  ```

  Importing specific values:
  ```javascript
  // app.js
  import { PI, multiply } from './math.js';
  ```

- **Default Exports:**
  Only one default export is allowed per module:
  ```javascript
  // math.js
  export default function divide(a, b) {
      return a / b;
  }
  ```

  Importing the default export:
  ```javascript
  // app.js
  import divide from './math.js';
  ```

### Key Differences Between ES6 Modules and CommonJS Modules

1. **Syntax:**
   - **CommonJS:** Uses `require()` for importing and `module.exports` for exporting.
   - **ES6 Modules:** Uses `import` and `export` keywords.

2. **Load Time:**
   - **CommonJS:** Modules are loaded synchronously (blocking) 
   at runtime.
   - **ES6 Modules:** Modules are loaded asynchronously 
   (non-blocking), and they are statically analyzed at compile time.

3. **Exporting:**
   - **CommonJS:** Uses `module.exports` or `exports` to export multiple things from a module.
   - **ES6 Modules:** Supports both named exports and default exports.

4. **Scope:**
   - **CommonJS:** Modules have their own scope, and variables defined in a module are not available in other modules unless explicitly exported.
   - **ES6 Modules:** Also have their own scope, but ES6 modules are strict mode by default.

5. **Support:**
   - **CommonJS:** Mainly used in Node.js environments.
   - **ES6 Modules:** Supported by modern browsers and Node.js (with `type="module"` in Node.js or by using `.mjs` file extensions).

6. **Dynamic Imports:**
   - **CommonJS:** Loading is static; you cannot dynamically decide which modules to load based on runtime conditions.
   - **ES6 Modules:** Supports dynamic imports using the `import()` function.

   ```javascript
   import('./math.js').then(module => {
       console.log(module.add(5, 3));
   });
   ```

### Conclusion

- **CommonJS** modules are primarily used in server-side environments like Node.js. They are older and have different behavior, especially in terms of synchronous loading.
- **ES6 Modules** are the modern standard for both client-side (browsers) and server-side JavaScript, offering more flexibility and support for modern syntax and asynchronous loading.

Understanding the difference between these module systems is crucial for working in different JavaScript environments and choosing the right module system based on the project needs.
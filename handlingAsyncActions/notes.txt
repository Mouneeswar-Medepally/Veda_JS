### Promises

A **Promise** is an object representing the eventual completion (or failure) of an 
asynchronous operation and its resulting value. 
It provides a more robust way to handle asynchronous operations compared to callbacks, 
by allowing chaining and better error handling.

The Promise object supports two properties: state and result.

#### States of a Promise

A Promise can be in one of three states:
1. **Pending**: The initial state. Neither fulfilled nor rejected.
2. **Fulfilled**: The operation completed successfully.
3. **Rejected**: The operation failed.

While a Promise object is "pending" (working), the result is undefined.

When a Promise object is "fulfilled", the result is a value.

When a Promise object is "rejected", the result is an error object.

#### Creating a Promise

A Promise is created using the `Promise` constructor, 
which takes a function (executor) with two parameters: `resolve` and `reject`. 
These parameters are functions used to respectively fulfill or reject the promise.

#### Example:

```javascript
const promise = new Promise((resolve, reject) => {
    // Asynchronous operation
    setTimeout(() => {
        const success = true; // Simulating a condition
        if (success) {
            resolve('Operation completed successfully.');
        } else {
            reject('Operation failed.');
        }
    }, 1000);
});
```

#### Using Promises

To handle the result of a promise, you use the `.then` method for fulfilled promises and 
the `.catch` method for rejected promises.
Both `.then` and `.catch` return new promises, allowing chaining.

#### Example:

```javascript
promise
    .then((result) => {
        console.log(result); // "Operation completed successfully."
    })
    .catch((error) => {
        console.error(error); // "Operation failed."
    });
```

#### Chaining Promises

Promises can be chained to handle multiple asynchronous operations 
in sequence.

```javascript
const firstPromise = new Promise((resolve) => {
    setTimeout(() => {
        resolve('First result');
        
    }, 1000);
});

firstPromise
    .then((result) => {
        console.log(result); // "First result"
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve('Second result');
            }, 1000);
        });
    })
    .then((result) => {
        console.log(result); // "Second result"
    })
    .catch((error) => {
        console.error(error);
    });
```

#### Combining Promises

- **`Promise.all`**: Waits for all promises to be fulfilled or 
for any to be rejected.
- **`Promise.race`**: Waits for the first promise to be fulfilled 
or rejected.
- **`Promise.allSettled`**: Waits for all promises to 
settle (either fulfilled or rejected).
- **`Promise.any`**: Waits for the first promise to be fulfilled, ignoring rejected promises.

#### Example:

```javascript
const promise1 = new Promise((resolve) => setTimeout(resolve, 1000, 'one'));
const promise2 = new Promise((resolve) => setTimeout(resolve, 2000, 'two'));

Promise.all([promise1, promise2]).then((values) => {
    console.log(values); // ["one", "two"] after 2 seconds
});
```

### Async/Await

`async` and `await` provide a more readable way to work with Promises. 
They allow you to write asynchronous code that looks synchronous, 
making it easier to understand and maintain.

#### Async Functions

An `async` function is a function that returns a Promise. 
The `async` keyword is placed before the function definition.

```javascript
async function fetchData() {
    return 'some data';
}

const fetchData=async ()=>{
    return 'some data';
}

fetchData().then((data) => console.log(data)); // "some data"
```

#### Await

The `await` keyword can only be used inside `async` functions. 
It makes JavaScript wait until the Promise is settled (either fulfilled or rejected) and returns the result.

#### Example:

```javascript
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('some data');
        }, 1000);
    });
}

async function getData() {
    try {
        const data = await fetchData();
        console.log(data); // "some data" after 1 second
    } catch (error) {
        console.error(error);
    }finally{
        console.log('print something')
    }
}

getData();
```

#### Error Handling

Error handling with `async/await` is done using `try/catch` blocks, making it easier to handle errors in a synchronous-like manner.

```javascript
async function getData() {
    try {
        const data = await fetchData();
        console.log(data);
    } catch (error) {
        console.error(error);
    }
}

getData();
```

#### Combining Async Functions

You can use `await` with multiple asynchronous operations sequentially or in parallel using `Promise.all`.

#### Sequential Example:

```javascript
async function getSequentialData() {
    const data1 = await fetchData1();
    const data2 = await fetchData2();
    console.log(data1, data2);
}

getSequentialData();
```

#### Parallel Example:

```javascript
async function getParallelData() {
    const [data1, data2] = await Promise.all([fetchData1(), fetchData2()]);
    console.log(data1, data2);
}

getParallelData();
```

### Conclusion

- **Promises**: Useful for handling asynchronous operations, avoiding callback hell, and providing better error handling.
- **Async/Await**: Simplifies working with Promises, making code more readable and easier to maintain. Use `async` to define a function that returns a Promise and `await` to pause execution until the Promise is resolved.

Before Promises and async/await were introduced in JavaScript, asynchronous operations like fetching requests were primarily handled using callbacks.